{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","type","primary","indigo","background","default","shapes","geometry","three","material","color","emissive","side","flatShading","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","bind","assertThisInitialized","stop","animate","state","width","height","lastShape","updateWindowDimensions","getWidth","scene","camera","renderer","antialias","position","z","Orbit","enableZoom","setClearColor","setSize","lights","set","add","randomShape","mount","appendChild","domElement","window","addEventListener","removeEventListener","removeChild","setState","getHeight","aspect","updateProjectionMatrix","innerWidth","innerHeight","index","random","length","shape","group","undefined","remove","rotation","x","y","frameId","requestAnimationFrame","cancelAnimationFrame","renderScene","render","max","Math","floor","_this2","classes","react_default","a","createElement","className","styles","CssBaseline_default","AppBar_default","Toolbar_default","Typography_default","variant","appTitle","noWrap","Button_default","onClick","onNewShpaeClick","Grid_default","container","item","style","padding","ref","Component","withStyles","root","flexGrow","marginLeft","marginRight","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b54bd33.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'typeface-roboto';\nimport * as three from 'three'\nimport Orbit from 'three-orbit-controls'\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport indigo from '@material-ui/core/colors/indigo';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst background = '#202020';\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: indigo,\n    background: {\n      default: background,\n    },\n  },\n});\n\nconst shapes = [\n  {\n    geometry: new three.TetrahedronGeometry(2),\n    material: new three.MeshPhongMaterial({ color: 0x891515, emissive: 0x340606, side: three.DoubleSide, flatShading: true })\n  },\n  {\n    geometry: new three.OctahedronGeometry(2),\n    material: new three.MeshPhongMaterial({ color: 0x858915, emissive: 0x313406, side: three.DoubleSide, flatShading: true })\n  },\n  {\n    geometry: new three.CubeGeometry(2, 2, 2),\n    material: new three.MeshPhongMaterial({ color: 0x158935, emissive: 0x093406, side: three.DoubleSide, flatShading: true })\n  },\n  {\n    geometry: new three.DodecahedronGeometry(2),\n    material: new three.MeshPhongMaterial({ color: 0x156289, emissive: 0x060734, side: three.DoubleSide, flatShading: true })\n  },\n  {\n    geometry: new three.IcosahedronGeometry(2),\n    material: new three.MeshPhongMaterial({ color: 0x152489, emissive: 0x072534, side: three.DoubleSide, flatShading: true })\n  }\n]\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.start = this.start.bind(this)\n    this.stop = this.stop.bind(this)\n    this.animate = this.animate.bind(this)\n\n    this.state = { width: 0, height: 0 };\n    this.lastShape = -1;\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    const width = this.getWidth()\n    const height = this.getWidth()\n\n    const scene = new three.Scene()\n    const camera = new three.PerspectiveCamera(\n      75,\n      width / height,\n      0.1,\n      1000\n    )\n    const renderer = new three.WebGLRenderer({ antialias: true })\n\n    this.scene = scene\n    this.camera = camera\n    this.renderer = renderer\n\n    camera.position.z = 4.5\n    let OrbitControls = Orbit(three);\n    let orbit = new OrbitControls(camera);\n    orbit.enableZoom = false;\n    renderer.setClearColor(background)\n    renderer.setSize(width, height)\n\n    let lights = [];\n    lights[0] = new three.PointLight(0xffffff, 1, 0);\n    lights[1] = new three.PointLight(0xffffff, 1, 0);\n    lights[2] = new three.PointLight(0xffffff, 1, 0);\n\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(- 100, - 200, - 100);\n\n    scene.add(lights[0]);\n    scene.add(lights[1]);\n    scene.add(lights[2]);\n\n    this.randomShape();\n\n    this.mount.appendChild(this.renderer.domElement)\n    this.start()\n\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: this.getWidth(), height: this.getHeight() });\n\n    this.camera.aspect = this.getWidth() / this.getHeight();\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.getWidth(), this.getHeight());\n  }\n\n  getWidth() {\n    return window.innerWidth - 40;\n  }\n\n  getHeight() {\n    return window.innerHeight - 100;\n  }\n\n  randomShape() {\n    let index = -1;\n    do {\n      index = this.random(shapes.length);\n    } while (index == this.lastShape);\n    const shape = shapes[index];\n    this.geometry = shape.geometry;\n    this.material = shape.material;\n    this.lastShape = index;\n    const group = new three.Group();\n    if (this.group !== undefined) {\n      this.scene.remove(this.group);\n      group.rotation.x = this.group.rotation.x;\n      group.rotation.y = this.group.rotation.y;\n    }\n    group.add(new three.Mesh(this.geometry, this.material));\n    this.scene.add(group);\n    this.group = group;\n  }\n\n  onNewShpaeClick() {\n    this.randomShape();\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate() {\n    this.group.rotation.x += 0.005\n    this.group.rotation.y += 0.005\n\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  random(max) {\n    return Math.floor(Math.random() * (max));\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={theme}>\n          <CssBaseline />\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.appTitle} noWrap>\n                Random Platonic Solid\n            </Typography>\n              <Button color=\"inherit\" onClick={() => this.onNewShpaeClick()}>New Solid</Button>\n            </Toolbar>\n          </AppBar>\n          <Grid container>\n            <Grid item style={{ padding: 20 }}>\n              <div\n                style={{ width: this.state.width - 10, height: this.state.height - 10 }}\n                ref={(mount) => { this.mount = mount }}\n              />\n            </Grid>\n          </Grid>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  appTitle: {\n    marginLeft: -12,\n    marginRight: 'auto',\n    flexGrow: 1,\n  },\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}